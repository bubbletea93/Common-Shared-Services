name: Publish Common_Shared_Services to GitHub Packages

on:
  push:
    tags:
      - 'v*.*.*'         # Trigger only on tags like v1.0.0, v1.0.1, etc.
  workflow_dispatch:     # Allows manual runs from the Actions tab

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read
      packages: write

    steps:
      # ‚îÄ‚îÄ 1. Check out the repository so we can see "Common Shared Services.csproj"
      - name: "‚¨áÔ∏è Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure the correct token is used


      # ‚îÄ‚îÄ 2. Install .NET 8 SDK so we can build & pack
      - name: "ü¶ä Setup .NET 8"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # ‚îÄ‚îÄ 3. Restore & Build the project
      - name: "üì¶ Restore & Build Release"
        run: |
          # Because the .csproj is at the repo root, reference it directly by name,
          # including spaces. Surround with quotes to avoid shell‚Äêparsing issues.
          dotnet restore "Common Shared Services.csproj"
          dotnet build   "Common Shared Services.csproj" --configuration Release

      # ‚îÄ‚îÄ 4. Pack into a .nupkg (using the version from the tag, e.g. v1.0.0 ‚Üí 1.0.0)
      - name: "üì¶ Pack NuGet package"
        run: |
          # 1. Make sure the local nupkgs folder exists
          mkdir -p nupkgs

          # 2. GitHub automatically checks out the tag into GITHUB_REF,
          #    which looks like "refs/tags/v1.0.2".  We can extract the tag name:
          raw_tag="${GITHUB_REF##*/}"       # e.g. "v1.0.2"
          version="${raw_tag#v}"           # strips leading "v", yields "1.0.2"

          echo "Packing version: '$version' (stripped from tag '$raw_tag')"

          # 3. Pass the cleaned version into MSBuild via /p:PackageVersion
          dotnet pack "Common Shared Services.csproj" \
            --configuration Release \
            --output ./nupkgs \
            /p:PackageVersion="$version"

      # ‚îÄ‚îÄ 5. Push the generated .nupkg(s) to GitHub Packages
      - name: "üöÄ Push to GitHub Packages"
        env:
          # GITHUB_TOKEN is automatically provided by Actions, with permissions to write packages
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for pkg in ./nupkgs/*.nupkg; do
            dotnet nuget push "$pkg" \
              --source "https://nuget.pkg.github.com/bubbletea93/index.json" \
              --api-key $GITHUB_TOKEN \
              --skip-duplicate
          done
